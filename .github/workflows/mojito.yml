name: Redmi Note 10

on:
  push:
    branches: [ master ]
  watch:
    types: [ workflow_dispatch, started ]

jobs:
  twrp:
    name: Build PitchBlack Recovery Project ( PBRP )
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Run pre-build housekeeping
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo apt update
        sudo apt -y autoremove --purge
        sudo apt clean
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install and update build dependencies
      run: |
        sudo apt update
        sudo apt full-upgrade
        sudo apt install git-core gnupg build-essential libelf-dev kernel-package bzip2 openjdk-8-jdk lib32stdc++6 libc6-dev-i386 git flex bison gperf zip curl zlib1g-dev gcc-multilib g++-multilib lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq -y
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo

    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Set variables for compilation
      id: var
      run: |
        echo "::set-output name=recovery_url::$(jq -r '.recovery_url' pb.json)"
        echo "::set-output name=recovery_branch::$(jq -r '.recovery_branch' pb.json)"
        echo "::set-output name=git_username::$(jq -r '.git_username' pb.json)"
        echo "::set-output name=git_email::$(jq -r '.git_email' pb.json)"
        echo "::set-output name=use_own_dt::$(jq -r '.use_own_dt' pb.json)"
        echo "::set-output name=dt_url::$(jq -r '.dt_url' pb.json)"
        echo "::set-output name=dt_remote::$(jq -r '.dt_remote' pb.json)"
        echo "::set-output name=dt_branch::$(jq -r '.dt_branch' pb.json)"
        echo "::set-output name=dt_path::$(jq -r '.dt_path' pb.json)"
        echo "::set-output name=device_code::$(jq -r '.device_code' pb.json)"
        echo "::set-output name=fix_product::$(jq -r '.fix_product' pb.json)"
        echo "::set-output name=fix_misscom::$(jq -r '.fix_misscom' pb.json)"
        echo "::set-output name=fix_busybox::$(jq -r '.fix_busybox' pb.json)"
        echo "::set-output name=fix_branch::$(jq -r '.fix_branch' pb.json)"
        echo "::set-output name=date::$(date +%F)"

    - name: Sync sources with source
      run: |
        PATH="~/bin:$PATH"
        repo init --depth=1 -u ${{ steps.var.outputs.recovery_url }} -b ${{ steps.var.outputs.recovery_branch }}
        git clone ${{ steps.var.outputs.dt_url }} -b ${{ steps.var.outputs.dt_branch }} ${{ steps.var.outputs.dt_path }}
        repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
        ls -al

    - name: Build recovery image
      run: |
        PATH="~/bin:$PATH"
        tree device
        export ALLOW_MISSING_DEPENDENCIES=true
        export TARGET_DEVICE_ALT="mojito, sunny"
        export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
        export TARGET_ARCH="arm64"
        export TW_DEFAULT_LANGUAGE="en"
        export USE_CCACHE="1"
        source build/envsetup.sh
        lunch omni_${{ steps.var.outputs.device_code }}-eng
        mka clean
        mka recoveryimage -j$(nproc --all)

    - name: Build recovery package
      run: |
        mv ./out/target/product/mojito/recovery.img ./package/recovery.img -f
        cd ./package
        zip -9 -r ./PBRP-mojito-3.1.0-$(date +%s)-Unofficial.zip ./*
        cd ..
        mkdir release
        mv ./package/*.zip ./release/ -f

    - name: Upload release artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pbrp_release-${{ github.run_number }})
        path: 'release'
        if-no-files-found: error